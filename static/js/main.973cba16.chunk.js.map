{"version":3,"sources":["components/Guesse.js","components/KeyBoard.js","components/Display.js","components/Won.js","components/NewGame.js","components/Lost.js","components/WinOrLost.js","data/data.js","App.js","serviceWorker.js","index.js"],"names":["GuesseCount","_ref","guesses","react_default","a","createElement","className","KeyBoard","letter","onClick","feedback","index","concat","Display","usedLetters","phrasedevine","replace","includes","WonTheGame","NewGame","Lost","WinOrLost","winOrlost","RandomWords","words","title","LETTER","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","add","resetGame","setState","Random","currentSelectLetter","donMatchedLetter","state","arr","length","random","Math","floor","_this$state","newGuesses","push","unique","toConsumableArray","Set","console","log","Notunique","prevstate","_this$state2","matched","justMismatched","indexOf","_this2","_this$state3","won","lost","Guesse","components_WinOrLost","Won","components_Lost","components_NewGame","map","components_Display","key","num","components_KeyBoard","getFeedbackForKeyboard","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.973cba16.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst GuesseCount  = ({ guesses }) => (\r\n  <div className=\"score\">{guesses}</div>\r\n);\r\n\r\nGuesseCount.propTypes = {\r\n    guesses: PropTypes.number.isRequired,\r\n}\r\nexport default GuesseCount;\r\n   \r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst KeyBoard = ({ letter, onClick, feedback,index}) => {\r\n    return (\r\n        <div>\r\n            <div onClick={() => onClick(letter,index)} className=\"block\">\r\n                  <span>\r\n                    <button className={`button ${feedback}`}>{letter}</button>\r\n                  </span>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\nKeyBoard.propTypes= {\r\n    letter:PropTypes.string.isRequired,\r\n    onClick: PropTypes.func.isRequired,\r\n    feedback: PropTypes.string.isRequired,\r\n}\r\nexport default KeyBoard;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst HIDDEN_SYMBOL = \"_\";\r\n\r\nconst Display= ({ usedLetters,phrasedevine })=> (\r\n        <div className=\"phrasedevine\">\r\n            <button className=\"phrase\">\r\n                {phrasedevine.replace(/\\w/g,\r\n                    (letter) => (usedLetters.includes(letter) ? letter : HIDDEN_SYMBOL))}\r\n            </button>\r\n        </div>\r\n    );\r\n\r\nDisplay.propTypes = {\r\n    usedLetters: PropTypes.array.isRequired,\r\n    phrasedevine: PropTypes.string.isRequired\r\n}\r\nexport default Display;","import React from 'react';\r\n\r\nconst WonTheGame =()=> <h1>You Won</h1>\r\n   \r\nexport default WonTheGame;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst NewGame =({onClick})=> (\r\n   <button onClick={() => onClick()} className=\"newGame-button\">New Game</button>\r\n);\r\n\r\nNewGame.propTypes = {\r\n    onClick: PropTypes.func.isRequired,\r\n}\r\nexport default NewGame;","import React from \"react\";\r\n\r\nconst Lost = ()=>  <h1>You Lost</h1>\r\n\r\nexport default Lost;","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nconst WinOrLost =({ winOrlost })=> (\r\n    <div>\r\n        {winOrlost}\r\n    </div>\r\n);\r\n\r\nWinOrLost.propTypes = {\r\n    winOrlost: PropTypes.object.isRequired,\r\n}\r\nexport default WinOrLost;","export let RandomWords = [\r\n    {\r\n        words: [\"A\", \"B\", \"C\"],\r\n        title: \"ALPHABET\"\r\n    },\r\n    {\r\n        words: [\"P\", \"O\", \"R\",\r\n            \"C\", \"H\", \"E\"],\r\n        title: \"Car\"\r\n    },\r\n    {\r\n        words: [\"Y\", \"A\", \"T\", \"C\",\r\n            \"H\"],\r\n        title: \"BOAT\"\r\n    },\r\n    /* and so on... */\r\n];","import React, { Component } from 'react';\r\nimport './css/App.css';\r\nimport GuesseCount from './components/Guesse';\r\nimport KeyBoard from './components/KeyBoard';\r\nimport Display from './components/Display';\r\nimport WonTheGame from './components/Won';\r\nimport NewGame from './components/NewGame';\r\nimport Lost from './components/Lost';\r\nimport WinOrLost from './components/WinOrLost'\r\nimport { RandomWords } from './data/data';\r\n\r\nconst LETTER = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];\r\n\r\n\r\n\r\n\r\nclass App extends Component {\r\nconstructor(){\r\n  super();\r\n  this.state={\r\n    phrasedevine: this.Random(),\r\n    currentSelectLetter: [],\r\n    guesses: 0,\r\n    donMatchedLetter: [],\r\n    Display: true,\r\n    \r\n  }\r\n  \r\n}\r\n    Random(){\r\n      let arr = RandomWords.length;\r\n      let random = Math.floor(Math.random() * arr )\r\n      //console.log(RandomWords[random].words)\r\n      return RandomWords[random].words \r\n    }\r\n    \r\n    \r\n  // Arrow fx for binding\r\n  handleClick = (index)=> { \r\n    \r\n   this.add(index)   \r\n}\r\n\r\n//Arrow fx for binding\r\n  resetGame=()=> {\r\n    this.setState({\r\n      phrasedevine:this.Random(),\r\n      currentSelectLetter: [],\r\n      guesses: 0,\r\n      donMatchedLetter: [],\r\n      Display: false\r\n    })    \r\n  }\r\n  add(index) {\r\n    const {phrasedevine,guesses,currentSelectLetter} = this.state;\r\n    if(phrasedevine.includes(index)){\r\n      let newGuesses = guesses + 2; \r\n      currentSelectLetter.push(index)\r\n      let unique = [...new Set(currentSelectLetter)];\r\n      \r\n      console.log(currentSelectLetter)\r\n      this.setState({ currentSelectLetter: [...unique], guesses: newGuesses, Display: false})\r\n     \r\n    }\r\n    else {\r\n      const { donMatchedLetter } = this.state;\r\n      donMatchedLetter.push(index)\r\n      let Notunique = [...new Set(donMatchedLetter)];\r\n      console.log(Notunique)\r\n      this.setState((prevstate)=> ({\r\n        guesses: prevstate.guesses - 1,\r\n        donMatchedLetter: Notunique\r\n      }))\r\n      \r\n    }\r\n   \r\n  }\r\n  \r\n  getFeedbackForKeyboard(letter) {\r\n    const { currentSelectLetter , Display } = this.state\r\n   \r\n   let matched = currentSelectLetter.includes(letter)\r\n    let justMismatched = currentSelectLetter.indexOf(letter);\r\n    console.log(justMismatched)\r\n    \r\n//console.log(currentSelectLetter.includes(letter))\r\n    if(Display === true) {\r\n      return \"button\"\r\n    }\r\n    return matched ? 'justMatched' :'';\r\n  }\r\n\r\n\r\n  render() {\r\n    const { phrasedevine, currentSelectLetter,guesses,donMatchedLetter } = this.state;\r\n      const won = currentSelectLetter.length === phrasedevine.length;\r\n    const lost = donMatchedLetter.length > phrasedevine.length;\r\n   \r\n    return (\r\n      <div>\r\n        <h1 className=\"jeu-pendu__title\">Jeu Pendu</h1>\r\n          <div className=\"jeu-pendu__score\">\r\n            <GuesseCount guesses={guesses}  />\r\n          </div>\r\n          <div className=\"jeu-pendu__Won\"> {won && <WinOrLost winOrlost={<WonTheGame/>} />}</div>\r\n        <div className=\"jeu-pendu__Won\"> {lost && <WinOrLost winOrlost={<Lost/>} />}</div>\r\n        \r\n         \r\n      \r\n        <div className=\"phrasedevine\">\r\n          { won ? <NewGame onClick={this.resetGame} />: lost ? <NewGame onClick={this.resetGame} />\r\n          : phrasedevine.map((phrasedevine,index)=> (\r\n             <Display key={index} phrasedevine={phrasedevine} \r\n              usedLetters={currentSelectLetter} num={2} />\r\n         ) )\r\n          }\r\n        </div>\r\n        <div className=\"memory\">\r\n       {\r\n         LETTER.map((letter,index) => (\r\n            <KeyBoard key={index} letter={letter} index={index} feedback={this.getFeedbackForKeyboard(letter)} onClick={this.handleClick} />\r\n         ))\r\n          \r\n       } \r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}